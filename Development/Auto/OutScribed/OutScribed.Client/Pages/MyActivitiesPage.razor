@page "/my/activities"

@inject NavigationManager navigator
@inject IApiGetServices<ActivitiesResponse> getActivities
@inject IApiGetServices<TaleCommentResponse> getTaleComment
@inject IApiGetServices<ThreadCommentResponse> getThreadComment

@inject IAuthenticationServices authenticate
@inject ISelectServices getSelect
@inject IApiGetServices<UserProfileResponse> getProfile
@inject IJSRuntime JsRuntime

<PageTitle>My Activities - OutScribed</PageTitle>

@if (Info != null)
{
    <div id="quick-info">@Info</div>
}

<div id="modal" class="@(IsModalOpen ? "active" : null)">

    <a href="#" class="close-modal-wrapper" @onclick:preventDefault="true" @onclick='() => CloseModal()'></a>

    <div class="@(IsExpandModal ? $"inner-modal expand" : $"inner-modal")">

        @if (Components != null && Components.Any())
        {

            @foreach (var component in Components.OrderBy(c => c.Date))
            {

                <div @key="component" class="@(component == Components.First() ? $"modal-contents first {component.ComponentClass}" : $"modal-contents {component.ComponentClass}")">

                    @if (component.ComponentType == ComponentTypes.CreateTaleResponse)
                    {
                        if (component.HasContents)
                        {

                            <CreateTaleResponseForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent" />
                        }
                        else
                        {
                            <LoadingComponent Type="--- loading response form ---" />

                        }

                    }
                    else if (component.ComponentType == ComponentTypes.FlagTaleComment)
                    {

                        if (component.HasContents)
                        {

                            <FlagTaleCommentForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent" />
                        }
                        else
                        {
                            <LoadingComponent Type="--- loading report form ---" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.CreateThreadResponse)
                    {
                        if (component.HasContents)
                        {

                            <CreateThreadResponseForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.FlagThreadComment)
                    {

                        if (component.HasContents)
                        {

                            <FlagThreadCommentForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.TaleCommentsList)
                    {

                        if (component.HasContents)
                        {

                            <TaleCommentsListComponent Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnSetInfo="SetInfo"
                            OnAddComponent="AddComponent" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.ThreadCommentsList)
                    {

                        if (component.HasContents)
                        {

                            <ThreadCommentsListComponent Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnSetInfo="SetInfo"
                            OnAddComponent="AddComponent" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.UserProfile)
                    {
                        if (component.HasContents)
                        {

                            <UserProfileComponent Component="component"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent"
                            OnSetInfo="SetInfo"
                            OnRemoveComponent="RemoveComponent" />

                        }

                    }
                    else if (component.ComponentType == ComponentTypes.LoginUser)
                    {
                        if (component.HasContents)
                        {

                            <LoginUserForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal" />
                        }

                    }

                </div>

            }

        }

    </div>

</div>

<HeaderComponent Tab="@NavTabs.Home" />

<NavigationComponent Tab="@NavTabs.Activities" @ref="Navigation" />

<main>

    @if (InputError == null)
    {

        if (HasInput)
        {

            <div class="filter-container">

                <div class="filter-header">

                    <p>
                        @Input.CounterToString
                    </p>

                    <div class="filter-links">
                        <a href="#" class="filter" @onclick:preventDefault="true" @onclick='() => IsShowFilter = !IsShowFilter'>
                            Filter
                        </a>

                    </div>

                </div>

            </div>

            <div class="@(IsShowFilter ? "filter-contents active" : "filter-contents")">

                <div class="form-container alt">

                    <fieldset>

                        <select class="form-field" @onchange="@TypeClicked">

                            <option value="-1"></option>

                            @foreach (var type in Types)
                            {
                                if (Input.Type == (ActivityTypes)type.Value)
                                {
                                    <option value="@type.Value" selected="selected">@type.Text</option>
                                }
                                else
                                {
                                    <option value="@type.Value">@type.Text</option>
                                }
                            }

                        </select>

                        <label class="@(string.IsNullOrEmpty(Type) || Type == "-1" ? null : "stay")">Filter By Type</label>

                    </fieldset>

                    <fieldset>

                        <select class="form-field" @onchange="@HasReadClicked">

                            <option value="-1"></option>

                            <option value="true" selected="@(Input.HasRead == true ? "selected" : null)">Read</option>

                            <option value="false" selected="@(Input.HasRead == false ? "selected" : null)">Unread</option>

                        </select>

                        <label class="@(HasRead == null ? null : "stay")">Filter By Read</label>

                    </fieldset>

                    <fieldset>

                        <InputText @bind-Value=@Keyword id="Keyword" class="form-field" />

                        <label class="@(string.IsNullOrEmpty(Keyword) ? null : "stay")">Filter by Keyword</label>

                    </fieldset>

                    <fieldset>

                        <select class="form-field" @onchange="@SortClicked">

                            <option value="-1"></option>

                            <option value="@SortTypes.Most_Recent" selected="@(Input.Sort == SortTypes.Most_Recent ? "selected" : null)">Most Recent</option>

                            <option value="@SortTypes.Least_Recent" selected="@(Input.Sort == SortTypes.Least_Recent ? "selected" : null)">Least Recent</option>

                        </select>

                        <label class="@(string.IsNullOrEmpty(Sort) || Sort == "-1" ?  null : "stay")">Order Results</label>

                    </fieldset>

                    <div class="button-holder">

                        <button @onclick:preventDefault="true" @onclick='() => LoadInput()'>
                            Get Activities
                        </button>

                    </div>

                </div>

            </div>

            if (Input.Activities != null && Input.Activities.Count > 0)
            {

                <div class="brief-content-container">

                    @foreach (var activity in Input.Activities)
                    {

                        <article class="brief-content">

                            <p class="content-subheading alt">
                                @activity.Type<span class="divider">|</span>@activity.DateToString
                            </p>

                            @if (activity.ConstructorType == ActivityConstructorTypes.Signed_In
                        || activity.ConstructorType == ActivityConstructorTypes.Created_Account
                        || activity.ConstructorType == ActivityConstructorTypes.Changed_Password
                        || activity.ConstructorType == ActivityConstructorTypes.Reset_Password
                        || activity.ConstructorType == ActivityConstructorTypes.Assigned_Role
                        || activity.ConstructorType == ActivityConstructorTypes.Removed_Role
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Profile
                        || activity.ConstructorType == ActivityConstructorTypes.Submitted_Application
                        || activity.ConstructorType == ActivityConstructorTypes.Added_Contact
                        || activity.ConstructorType == ActivityConstructorTypes.Updated_Contact
                        || activity.ConstructorType == ActivityConstructorTypes.Create_Tale
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Tale_Basic
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Tale_Summary
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Tale_Country
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Tale_Details
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Tale_Photo
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Tale_Tag
                        || activity.ConstructorType == ActivityConstructorTypes.Tale_Submitted
                        || activity.ConstructorType == ActivityConstructorTypes.Tale_Status_Updated
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Thread_Basic
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Thread_Summary
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Thread_Country
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Thread_Details
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Thread_Tag
                        || activity.ConstructorType == ActivityConstructorTypes.Update_Thread_Photo)
                            {
                                <p class="content-summary">
                                    @activity.SimpleText
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.UnFollowing_Account)
                            {
                                <p class="content-summary">
                                    You unfollowed the user:
                                    <a class="at" href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UserProfile, Username = activity.DetailsParameters![0]})'>
                                        @activity.DetailsParameters![0]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Following_Account)
                            {
                                <p class="content-summary">
                                    You followed the user:
                                    <a class="at" href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UserProfile, Username = activity.DetailsParameters![0]})'>
                                        @activity.DetailsParameters![0]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.FollowBy_Account)
                            {
                                <p class="content-summary">
                                    You were followed by the user:
                                    <a class="at" href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UserProfile, Username = activity.DetailsParameters![0]})'>
                                        @activity.DetailsParameters![0]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Tale_Published)
                            {
                                <p class="content-summary">
                                    Your tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                    has been approved for publication.
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Rated_Tale)
                            {
                                <p class="content-summary">
                                    You <i>@activity.{DetailsParameters![0]}</i> the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Flagged_Tale)
                            {
                                <p class="content-summary">
                                    You reported the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                    for <i>@activity.{DetailsParameters![2]}</i>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Following_Tale)
                            {
                                <p class="content-summary">
                                    You followed the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Unfollowing_Tale)
                            {
                                <p class="content-summary">
                                    You unfollowed the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Commented_Tale)
                            {
                                <p class="content-summary">
                                    You
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.TaleCommentsList, Id = Guid.Parse(activity.DetailsParameters![0])})'>
                                        commented
                                    </a>
                                    on the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.CommentedTo_Tale)
                            {
                                <p class="content-summary">
                                    <a class="at" href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UserProfile, Username = activity.DetailsParameters![0]})'>
                                        @activity.DetailsParameters![0]
                                    </a>
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.TaleCommentsList, Id = Guid.Parse(activity.DetailsParameters![1])})'>
                                        commented
                                    </a>
                                    on your tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![2]}", false)'>
                                        @activity.DetailsParameters![3]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Responded_Tale)
                            {
                                <p class="content-summary">
                                    You
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.TaleCommentsList, Id = Guid.Parse(activity.DetailsParameters![0])})'>
                                        responded
                                    </a>
                                    to a comment on the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.RespondedTo_Tale)
                            {
                                <p class="content-summary">
                                    <a class="at" href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UserProfile, Username = activity.DetailsParameters![0]})'>
                                        @activity.DetailsParameters![0]
                                    </a>
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.TaleCommentsList, Id = Guid.Parse(activity.DetailsParameters![1])})'>
                                        responded
                                    </a>
                                    to a comment you made on the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![2]}", false)'>
                                        @activity.DetailsParameters![3]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Rated_Comment_Tale)
                            {
                                <p class="content-summary">
                                    You <i>@activity.{DetailsParameters![0]}</i> a
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.TaleCommentsList, Id = Guid.Parse(activity.DetailsParameters![1])})'>
                                        comment
                                    </a>
                                    on the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![2]}", false)'>
                                        @activity.DetailsParameters![3]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Flagged_Comment_Tale)
                            {
                                <p class="content-summary">
                                    You reported a
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.TaleCommentsList, Id = Guid.Parse(activity.DetailsParameters![0])})'>
                                        comment
                                    </a>
                                    on the tale:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                    for <i>@activity.{DetailsParameters![3]}</i>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Create_Thread)
                            {
                                <p class="content-summary">
                                    You spunned a new thread, @activity.DetailsParameters![0] off the tale:

                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tale/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Thread_Published)
                            {
                                <p class="content-summary">
                                    You published a new thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>.
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Add_Thread_Addendum)
                            {
                                <p class="content-summary">
                                    You added an addedndum to your thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>.
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Rated_Thread)
                            {
                                <p class="content-summary">
                                    You <i>@activity.{DetailsParameters![0]}</i> the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Flagged_Thread)
                            {
                                <p class="content-summary">
                                    You reported the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                    for <i>@activity.{DetailsParameters![2]}</i>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Following_Thread)
                            {
                                <p class="content-summary">
                                    You followed the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Unfollowing_Thread)
                            {
                                <p class="content-summary">
                                    You unfollowed the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Commented_Thread)
                            {
                                <p class="content-summary">
                                    You
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.ThreadCommentsList, Id = Guid.Parse(activity.DetailsParameters![0])})'>
                                        commented
                                    </a>
                                    on the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.CommentedTo_Thread)
                            {
                                <p class="content-summary">
                                    <a class="at" href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UserProfile, Username = activity.DetailsParameters![0]})'>
                                        @activity.DetailsParameters![0]
                                    </a>
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.ThreadCommentsList, Id = Guid.Parse(activity.DetailsParameters![1])})'>
                                        commented
                                    </a>
                                    on your thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![2]}", false)'>
                                        @activity.DetailsParameters![3]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Responded_Thread)
                            {
                                <p class="content-summary">
                                    You
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.ThreadCommentsList, Id = Guid.Parse(activity.DetailsParameters![0])})'>
                                        responded
                                    </a>
                                    to a comment on the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.RespondedTo_Thread)
                            {
                                <p class="content-summary">
                                    <a class="at" href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UserProfile, Username = activity.DetailsParameters![0]})'>
                                        @activity.DetailsParameters![0]
                                    </a>
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.ThreadCommentsList, Id = Guid.Parse(activity.DetailsParameters![1])})'>
                                        responded
                                    </a>
                                    to a comment you made on the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![2]}", false)'>
                                        @activity.DetailsParameters![3]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Rated_Comment_Thread)
                            {
                                <p class="content-summary">
                                    You <i>@activity.{DetailsParameters![0]}</i> a
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.ThreadCommentsList, Id = Guid.Parse(activity.DetailsParameters![1])})'>
                                        comment
                                    </a>
                                    on the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![2]}", false)'>
                                        @activity.DetailsParameters![3]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Flagged_Comment_Thread)
                            {
                                <p class="content-summary">
                                    You reported a
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.ThreadCommentsList, Id = Guid.Parse(activity.DetailsParameters![0])})'>
                                        comment
                                    </a>
                                    on the thread:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/thread/{activity.DetailsParameters![1]}", false)'>
                                        @activity.DetailsParameters![2]
                                    </a>
                                    for <i>@activity.{DetailsParameters![3]}</i>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Following_Watchlist)
                            {
                                <p class="content-summary">
                                    You followed the watchlist:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/watchlist/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                </p>
                            }
                            else if (activity.ConstructorType == ActivityConstructorTypes.Unfollowing_Watchlist)
                            {
                                <p class="content-summary">
                                    You unfollowed the watchlist:
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/watchlist/{activity.DetailsParameters![0]}", false)'>
                                        @activity.DetailsParameters![1]
                                    </a>
                                </p>
                            }

                        </article>

                    }

                </div>

                <div class="navigation-container">

                    <p class="line"></p>

                    <div class="navigation-links">
                        @if (Input.Previous)
                        {
                            <a href="#" class="previous" @onclick:preventDefault="true" @onclick='() => LoadMore(0)'> </a>
                        }
                        else
                        {
                            <a href="#" class="previous disabled" @onclick:preventDefault="true"> </a>
                        }
                        @if (Input.Next)
                        {
                            <a href="#" class="next" @onclick:preventDefault="true" @onclick='() => LoadMore(1)'> </a>
                        }
                        else
                        {
                            <a href="#" class="next disabled" @onclick:preventDefault="true"> </a>
                        }

                    </div>

                    <p class="line"></p>

                </div>
            }
            else
            {
                <div class="no-content">

                    <ErrorGif />

                    <h3>
                        No Result!
                    </h3>

                    <p>
                        No activity was found!
                    </p>

                </div>

            }

        }
        else
        {
            <LoadingComponent Type=" --- loading user activities ---" />
        }
    }
    else
    {
        <ErrorComponent Message=@InputError Type="threads" />
    }


</main>

<FooterComponent />

@code {

    [Parameter]
    public NavigationComponent Navigation { get; set; } = default!;

    bool IsModalOpen { get; set; } = false;

    bool IsShowFilter { get; set; } = false;


    List<DropdownList> Types = new();


    string? Sort { get; set; }

    string? Type { get; set; }

    private string? Keyword { get; set; } = null;

    bool? HasRead { get; set; } = null;


    public ActivitiesResponse Input { get; set; } = default!;

    protected void HasReadClicked(ChangeEventArgs e)
    {
        HasRead = e.Value == null ? null : bool.Parse(e.Value.ToString()!);
    }

    protected void SortClicked(ChangeEventArgs e)
    {
        Sort = e.Value == null ? null : e.Value.ToString();
    }

    protected void TypeClicked(ChangeEventArgs e)
    {
        Type = e.Value == null ? null : e.Value.ToString();
    }

    protected override async Task OnInitializedAsync()
    {

        if (RendererInfo.Name == "Static")
        {
            return;
        }
        else if (RendererInfo.Name == "Server")
        {
            navigator.NavigateTo($"/login?returnUrl=/my/activties", true);
        }

        Types = getSelect.Get<ActivityTypes>();

        Components = new();

        await LoadInput();

    }

    public string? Info { get; set; }

    private async Task SetInfo(string info)
    {

        Info = info;

        StateHasChanged();

        await Task.Delay(5000);

        Info = null;

        StateHasChanged();

    }

    bool HasInput { get; set; } = false;

    private string? InputError { get; set; }


    bool IsExpandModal { get; set; } = false;

    int ScrollPosition { get; set; }

    List<ComponentParameters> Components { get; set; } = default!;

    private async Task AddComponent(ComponentParameters component)
    {

        shouldRender = false;

        Components.Insert(0, component);

        if (!IsModalOpen)
        {
            IsModalOpen = true;

            await JsRuntime.InvokeVoidAsync("OnModalOpen");
        }

        await authenticate.CheckJwtTokenAsync();

        if (component.ComponentType == ComponentTypes.UserProfile)
        {
            var result = await getProfile.GetAsync($"users/profile/username/{component.Username}", CancelToken);

            if (result.IsFailure)
            {
                component.ErrorMessage = result.Error ?? "Unknown server error";

            }
            else
            {
                component.Profile = result.Value;
            }
        }
        else if (component.ComponentType == ComponentTypes.TaleCommentsList)
        {
            var result = await getTaleComment.GetAsync($"tales/comment/{component.Id}", CancelToken);

            if (result.IsFailure)
            {
                component.ErrorMessage = result.Error ?? "Unknown server error";

            }
            else
            {
                component.TaleCommentsList = result.Value;
            }
        }
        else if (component.ComponentType == ComponentTypes.ThreadCommentsList)
        {
            var result = await getThreadComment.GetAsync($"threads/comment/{component.Id}", CancelToken);

            if (result.IsFailure)
            {
                component.ErrorMessage = result.Error ?? "Unknown server error";

            }
            else
            {
                component.ThreadCommentsList = result.Value;
            }
        }

        component.HasContents = true;

        component.ComponentState = ComponentStates.Enter;

        shouldRender = true;

    }

    public async Task RemoveComponent(ComponentParameters component)
    {

        var info = component.Info;

        component.ComponentState = ComponentStates.Leave;

        if (info != null)
        {
            if (component.ComponentType == ComponentTypes.LoginUser)
            {
                await Navigation.Refresh();
            }
        }

        await Task.Delay(1000);

        Components.Remove(component);

        if (Components.Count == 0)
        {
            await CloseModal();
        }

        StateHasChanged();

        if (info != null)
            await SetInfo(info);
    }

    public void ExpandModal()
    {

        IsExpandModal = !IsExpandModal;

    }

    private bool shouldRender = true;

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    public async Task CloseModal()
    {

        Components = new();

        IsModalOpen = false;

        await JsRuntime.InvokeVoidAsync("OnModalClose");

        // StateHasChanged();

    }

    public async Task LoadMore(int type)
    {
        if (type == 0)
            Input.Pointer--;
        else if (type == 1)
            Input.Pointer++;

        if (Input.Pointer >= 0)
        {
            await LoadInput();

            await JsRuntime.InvokeVoidAsync("OnScrollToTop");

        }

    }

    public async Task LoadInput()
    {

        if (!await authenticate.CheckJwtTokenAsync())
        {
            navigator.NavigateTo($"/login?returnUrl=/my/activities", false);
        }

        IsShowFilter = false;

        HasInput = false;

        InputError = null;

        var url = "users/activities?";

        if (!string.IsNullOrEmpty(Sort) && Sort != "-1")
        {
            Enum.TryParse(Sort, out SortTypes sort);

            url = url + $"sort={sort}&";
        }

        if (!string.IsNullOrEmpty(Type) && Type != "-1")
        {
            Enum.TryParse(Type, out ActivityTypes type);

            url = url + $"type={type}&";
        }

        if (HasRead != null)
        {
            url = url + $"hasRead={HasRead}&";
        }

        if (!string.IsNullOrEmpty(Keyword))
        {
            url = url + $"keyword={Keyword}&";
        }

        if (Input != null && Input.Pointer > 0)
        {
            url = url + $"pointer={Input.Pointer}&size=50";
        }
        else
        {
            url = url + "size=50";
        }

        var result = await getActivities.GetAsync(url, CancelToken);

        if (result.IsFailure)
        {
            InputError = result.Error ?? "Unknown server error";
        }
        else
        {
            Input = result.Value;
        }


        HasInput = true;

    }

}
