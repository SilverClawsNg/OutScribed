@page "/pool/watchlists"

@inject NavigationManager navigator
@inject IApiGetServices<PoolWatchListsResponse> getWatchlists
@inject IAuthenticationServices authenticate
@inject ISelectServices getSelect
@inject IApiGetServices<UserProfileResponse> getProfile
@inject IApiGetServices<TaleLinksResponse> getTales

@inject ILocalStorageService localStorage
@inject IJSRuntime JsRuntime

@if (Info != null)
{
    <div id="quick-info">@Info</div>
}

<div id="modal" class="@(IsModalOpen ? "active" : null)">

    <a href="#" class="close-modal-wrapper" @onclick:preventDefault="true" @onclick='() => CloseModal()'></a>

    <div class="@(IsExpandModal ? $"inner-modal expand" : $"inner-modal")">

        @if (Components != null && Components.Any())
        {
            @foreach (var component in Components.OrderBy(c=>c.Date))
            {

                <div @key="component" class="@(component == Components.First() ? $"modal-contents first {component.ComponentClass}" : $"modal-contents {component.ComponentClass}")">

                    @if (component.ComponentType == ComponentTypes.CreateWatchList)
                    {
                        if (component.HasContents)
                        {

                            <CreateWatchListForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.UpdateWatchList)
                    {
                        if (component.HasContents)
                        {

                            <UpdateWatchListForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.LinkTales)
                    {

                        if (component.HasContents)
                        {

                            <LinkTaleForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.LoginUser)
                    {
                        if (component.HasContents)
                        {

                            <LoginUserForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal" />
                        }

                    }
                </div>

            }
        }


    </div>

</div>

<HeaderComponent Tab="@NavTabs.None" />

<NavigationComponent Tab="@NavTabs.Pool_Watchlists" @ref="Navigation" />

<main>

    @if (InputError == null)
    {

        if (HasInput)
        {

            <div class="filter-container">

                <div class="filter-header">

                    <p>
                        @Input.CounterToString
                    </p>

                    <div class="filter-links">
                        <a href="#" class="filter" @onclick:preventDefault="true" @onclick='() => IsShowFilter = !IsShowFilter'>
                            Filter
                        </a>
                        @if (IsPublisher)
                        {
                            <a class="new" href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.CreateWatchList})'>
                                New
                            </a>
                        }

                    </div>

                </div>

            </div>

            <div class="@(IsShowFilter ? "filter-contents active" : "filter-contents")">

                <div class="form-container alt">

                    <fieldset>

                        <select class="form-field" @onchange="@CategoryClicked">

                            <option value="-1"></option>

                            @foreach (var category in Categories)
                            {
                                if (Category != null && category.Value == int.Parse(Category))
                                {
                                    <option value="@category.Value" selected="selected">@category.Text</option>
                                }
                                else
                                {
                                    <option value="@category.Value">@category.Text</option>
                                }
                            }

                        </select>

                        <label class="@(string.IsNullOrEmpty(Category) || Category == "-1" ? null : "stay")">Filter by Category</label>

                    </fieldset>

                    <fieldset>

                        <select class="form-field" @onchange="@CountryClicked">

                            <option value="-1"></option>

                            @foreach (var country in Countries)
                            {
                                if (Country != null && country.Value == int.Parse(Country))
                                {
                                    <option value="@country.Value" selected="selected">@country.Text</option>
                                }
                                else
                                {
                                    <option value="@country.Value">@country.Text</option>
                                }
                            }

                        </select>

                        <label class="@(string.IsNullOrEmpty(Country)  || Country == "-1" ? null : "stay")">Filter by Country</label>

                    </fieldset>

                    <fieldset>

                        <InputText @bind-Value=@Keyword id="Keyword" class="form-field" />

                        <label class="@(string.IsNullOrEmpty(Keyword) ? null : "stay")">Filter by Keyword</label>

                    </fieldset>

                    <fieldset>

                        <select class="form-field" @onchange="@SortClicked">

                            <option value="-1"></option>

                            <option value="@SortTypes.Most_Recent" selected="@(Input.Sort == SortTypes.Most_Recent ? "selected" : null)">Most Recent</option>

                            <option value="@SortTypes.Least_Recent" selected="@(Input.Sort == SortTypes.Least_Recent ? "selected" : null)">Least Recent</option>

                            <option value="@SortTypes.Most_Followed" selected="@(Input.Sort == SortTypes.Most_Followed ? "selected" : null)">Most Watched</option>

                        </select>

                        <label class="@(string.IsNullOrEmpty(Sort) || Sort == "-1"  ? null : "stay")">Order Results</label>

                    </fieldset>

                    <div class="button-holder">

                        <button @onclick:preventDefault="true" @onclick='() => LoadInput()'>
                            Get Watchlists
                        </button>

                    </div>

                </div>

            </div>

            @if (Input.WatchLists != null && Input.WatchLists.Count > 0)
            {

                <div class="brief-content-container">

                    @foreach (var watchList in Input.WatchLists)
                    {
                        <article class="brief-content">

                            <p class="content-subheading">
                                @watchList.CategoryToString<span class="divider">|</span>
                                @if (watchList.CountryToString != null)
                                {
                                    @watchList.CountryToString
                                    <span class="divider">|</span>
                                }
                                @watchList.DateToString
                            </p>

                            <h1 class="content-heading">
                                @watchList.Title

                            </h1>
                            <p class="content-summary">
                                @watchList.Summary
                                <a class="source" href="@watchList.SourceUrl" target="_blank">
                                    @watchList.SourceText
                                </a>
                            </p>

                            <div class="content-stats">
                                <p> <span>@watchList.FollowersToString</span> Followers</p>
                                <p> <span>@watchList.TalesToString</span> Linked Tales</p>

                            </div>

                            <div class="content-links">

                                <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.LinkTales, Id = watchList.Id})'>
                                    Link Tale
                                </a>

                                @if (IsPublisher)
                                {
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UpdateWatchList, WatchlistSummary = watchList})'>
                                        Update
                                    </a>
                                }
                              
                            </div>

                        </article>

                    }

                </div>

                <div class="navigation-container">

                    <div class="navigation-links">

                        @if (Input.Previous)
                        {
                            <a href="#" class="previous" @onclick:preventDefault="true" @onclick='() => LoadMore(0)'></a>
                        }
                        else
                        {
                            <a href="#" class="previous disabled" @onclick:preventDefault="true"> </a>
                        }
                        @if (Input.Next)
                        {
                            <a href="#" class="next" @onclick:preventDefault="true" @onclick='() => LoadMore(1)'>  </a>
                        }
                        else
                        {
                            <a href="#" class="next disabled" @onclick:preventDefault="true"> </a>
                        }

                    </div>

                </div>

            }
            else
            {
                <div class="no-content">

                    <ErrorGif />

                    <div class="no-contents-box">

                        <h3>
                            No Result!
                        </h3>

                        @if (Input.Keyword != null)
                        {
                            <p>
                                It appears no watchlist matches your keywords.
                            </p>
                            <p>
                                Try searching again with more specific keywords. Note that we do not search common words
                                like "is", "are", "them", etc.
                            </p>

                        }
                        else
                        {
                            <p>
                                No watchlist was found.

                            </p>

                        }

                    </div>

                </div>

            }

        }
        else
        {
            <LoadingComponent Type="--- loading pool watchlists ---" />
        }
    }
    else
    {
        <ErrorComponent Message=@InputError Type="pool watchLists" />
    }


</main>


<FooterComponent />

@code {

    [Parameter]
    public NavigationComponent Navigation { get; set; } = default!;

    bool IsModalOpen { get; set; } = false;

    bool IsShowFilter { get; set; } = false;


    List<DropdownList> Categories = new();

    List<DropdownList> Countries = new();


    string? Category { get; set; }

    string? Country { get; set; }

    string? Sort { get; set; }

    private string? Keyword { get; set; }


    // public UserProfileResponse UserProfile { get; set; } = default!;

    public PoolWatchListsResponse Input { get; set; } = default!;

    // public TaleLinksResponse TalesInput { get; set; } = default!;


    protected void CategoryClicked(ChangeEventArgs e)
    {
        Category = e.Value == null ? null : e.Value.ToString();
    }

    protected void CountryClicked(ChangeEventArgs e)
    {
        Country = e.Value == null ? null : e.Value.ToString();
    }

    protected void SortClicked(ChangeEventArgs e)
    {
        Sort = e.Value == null ? null : e.Value.ToString();
    }

    bool IsPublisher { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {

        if (RendererInfo.Name == "Static")
        {
            return;
        }
        else if (RendererInfo.Name == "Server")
        {
            navigator.NavigateTo($"/login?returnUrl=/pool/watchlists", true);
        }

        Components = new();

        var starterData = await localStorage.GetItemAsync<StarterData>("starterData");

        if (starterData == null || starterData.Role == RoleTypes.None)
        {
            navigator.NavigateTo($"/login?returnurl=/pool/watchLists", false);
        }
        else
        {
            IsPublisher = starterData.Role == RoleTypes.Publisher;

        }

        Categories = getSelect.Get<Categories>();

        Countries = getSelect.Get<Countries>();

        await LoadInput();

    }


    public string? Info { get; set; }

    bool HasInput { get; set; } = false;

    private string? InputError { get; set; }


    private async Task SetInfo(string info)
    {

        Info = info;

        StateHasChanged();

        await Task.Delay(5000);

        Info = null;

        StateHasChanged();

    }


    bool IsExpandModal { get; set; } = false;

    int ScrollPosition { get; set; }


    List<ComponentParameters> Components { get; set; } = default!;

    private async Task AddComponent(ComponentParameters component)
    {

        if (component.Reload == false)
        {

            shouldRender = false;

            Components.Insert(0, component);

        }

        if (component.Append == false)
        {
            component.HasContents = false;
        }

        if (!IsModalOpen)
        {
            IsModalOpen = true;

            await JsRuntime.InvokeVoidAsync("OnModalOpen");
        }

        await authenticate.CheckJwtTokenAsync();

        if (component.ComponentType == ComponentTypes.LinkTales)
        {

            var url = component.Url == null ? $"tales/links" : component.Url;

            var result = await getTales.GetAsync(url, CancelToken);

            if (result.IsFailure)
            {
                component.ErrorMessage = result.Error ?? "Unknown server error";
            }
            else
            {

                if (component.Append == true)
                {
                    if (component.TaleLinks.Tales != null && result.Value.Tales != null)
                    {
                        component.TaleLinks.Tales.AddRange(result.Value.Tales);

                        component.TaleLinks.More = result.Value.More;
                    }
                }
                else
                {
                    component.TaleLinks = result.Value;
                }

            }

        }

        if (component.Append == false)
        {
            component.HasContents = true;
        }

        if (component.Reload == false)
        {
            component.ComponentState = ComponentStates.Enter;
        }

        shouldRender = true;

    }

    public async Task RemoveComponent(ComponentParameters component)
    {

        var info = component.Info;

        component.ComponentState = ComponentStates.Leave;

        if (info != null)
        {

            if (component.ComponentType == ComponentTypes.LoginUser)
            {
                await Navigation.Refresh();
            }
            else if (component.ComponentType == ComponentTypes.CreateWatchList)
            {
                if (Input.WatchLists == null)
                    Input.WatchLists = new();

                Input.WatchLists.Insert(0, component.WatchlistSummary);

                Input.Counter++;
            }
            else if (component.ComponentType == ComponentTypes.UpdateWatchList)
            {

                var index = Input.WatchLists?.FindIndex(c => c.Id == component.WatchlistSummary.Id);

                if (index != null && index != -1)
                {
                    Input.WatchLists?.RemoveAt((int)index);

                    Input.WatchLists?.Insert((int)index, component.WatchlistSummary);
                }

            }
            else if (component.ComponentType == ComponentTypes.LinkTales)
            {

                var watchlist = Input.WatchLists?.Where(c => c.Id == component.WatchlistSummary.Id).FirstOrDefault();

                if (watchlist != null)
                    watchlist.Tales = component.Counts;

            }

        }

        await Task.Delay(1000);

        Components.Remove(component);

        if (Components.Count == 0)
        {
            await CloseModal();
        }

        StateHasChanged();

        if (info != null)
            await SetInfo(info);
    }

    public void ExpandModal()
    {

        IsExpandModal = !IsExpandModal;

    }

    private bool shouldRender = true;

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    public async Task CloseModal()
    {

        Components = new();

        IsModalOpen = false;

        await JsRuntime.InvokeVoidAsync("OnModalClose");

        // StateHasChanged();

    }

    public async Task LoadMore(int type)
    {
        if (type == 0)
            Input.Pointer--;
        else if (type == 1)
            Input.Pointer++;

        if (Input.Pointer >= 0)
        {
            await LoadInput();
        }

    }

    public async Task LoadInput()
    {

        if (!await authenticate.CheckJwtTokenAsync())
        {
            navigator.NavigateTo($"/login?returnurl=/pool/watchLists", false);
        }

        IsShowFilter = false;

        HasInput = false;

        InputError = null;

        var url = "watchLists/pool?";

        if (!string.IsNullOrEmpty(Country) && Country != "-1")
        {
            Enum.TryParse(Country, out Countries country);

            url = url + $"country={country}&";
        }

        if (!string.IsNullOrEmpty(Category) && Category != "-1")
        {
            Enum.TryParse(Category, out Categories category);

            url = url + $"category={category}&";
        }

        if (!string.IsNullOrEmpty(Sort) && Sort != "-1")
        {
            Enum.TryParse(Sort, out SortTypes sort);

            url = url + $"sort={sort}&";
        }

        if (!string.IsNullOrEmpty(Keyword))
        {
            url = url + $"keyword={Keyword}&";
        }

        if (Input != null && Input.Pointer > 0)
        {
            url = url + $"pointer={Input.Pointer}&size=5";
        }
        else
        {
            url = url + "size=6";
        }
     

        var result = await getWatchlists.GetAsync(url, CancelToken);

        if (result.IsFailure)
        {
            InputError = result.Error ?? "Unknown server error";
        }
        else
        {
            Input = result.Value;
        }


        HasInput = true;

    }

}
