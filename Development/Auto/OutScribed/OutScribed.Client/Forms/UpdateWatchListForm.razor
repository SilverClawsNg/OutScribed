@inject IApiPostServices<CreateWatchListResponse,UpdateWatchListRequest> saveWatchList
@inject NavigationManager navigator
@inject ISelectServices getSelect
@inject IAuthenticationServices authenticate

<EditForm Model=@FormData OnValidSubmit=@FormAction FormName="CreateWatchListForm">

    <DataAnnotationsValidator />

    <div class="modal-header">

        <div class="inner-modal-header">

            <div class="modal-header-links">

                <h1>
                    Update Watchlist
                </h1>

            </div>

            <div class="modal-header-menu">

                <a class="help" href="#" @onclick:preventDefault="true" @onclick='(() => ShowHelp = !ShowHelp)'>?</a>

                <button type="submit"></button>

                <a class="@(Window ? "maximize" : "minimize")" href="#" @onclick:preventDefault="true" @onclick='(() => ExpandModal())'></a>

                <a class="close" href="#" @onclick:preventDefault="true" @onclick='(() => RemoveComponent())'>X</a>

            </div>

        </div>

    </div>

    <div class="modal-body">

        <div class="inner-modal-body">

            @if (Progress == FormProgress.Loading)
            {
                <div class="form-progress">

                    <LoadingGif />

                    <p class="progress-message">@FormMessage </p>

                    <div class="progress-links">
                        <a href="#" @onclick:preventDefault="true" @onclick="CancelSubmission">
                            Cancel
                        </a>
                    </div>

                </div>

            }
            else if (Progress == FormProgress.Error)
            {
                <div class="form-progress">

                    <ErrorGif />

                    <p class="progress-message">
                        An error occured: <span class="error"> @FormError </span>
                    </p>
                    <div class="progress-links">

                        <a href="#" @onclick:preventDefault="true" @onclick="() => Progress = FormProgress.None">
                            Retry
                        </a>
                    </div>
                </div>

            }
            else if (Progress == FormProgress.Close)
            {
                <div class="form-progress">

                    <ErrorGif />

                    <p class="progress-message">
                        Error occured retrieving saved watchlist. Refresh page.
                    </p>
                    <div class="progress-links">

                        <a href="#" @onclick:preventDefault="true" @onclick='() => RemoveComponent()'>
                            Close
                        </a>
                    </div>
                </div>

            }

            <div class="@(ShowHelp ? "form-help active" : "form-help")">
                <ul>
                    <li>
                        Updating Watchlists
                    </li>

                    <li>
                        Watchlists requires a title, category, country, summary, and
                        source url & text.
                    </li>
                    <li>
                        Title and summary are restricted to 128 & 1024 chracters respectively.
                    </li>
                </ul>
            </div>

            <div class="form-container">

                <fieldset>

                    <select class="form-field" @onchange="@CountryClicked">

                        <option></option>

                        @foreach (var country in Countries)
                        {
                            if (FormData.Country != null && country.Value == (int)FormData.Country)
                            {
                                <option value="@country.Value" selected="selected">@country.Text</option>
                            }
                            else
                            {
                                <option value="@country.Value">@country.Text</option>
                            }
                        }

                    </select>

                    <label class="@(FormData.Country == null ? null : "stay")">Country</label>

                </fieldset>

                <fieldset>

                    <select class="form-field" @onchange="@CategoryClicked">

                        <option value="-1"></option>

                        @foreach (var category in Categories)
                        {
                            if (FormData.Category != null && category.Value == (int)FormData.Category)
                            {
                                <option value="@category.Value" selected="selected">@category.Text</option>
                            }
                            else
                            {
                                <option value="@category.Value">@category.Text</option>
                            }
                        }

                    </select>

                    <label class="@(FormData.Category == null ? null : "stay")">Category</label>

                </fieldset>

                <fieldset>
                    <InputText @bind-Value=FormData.Title id="Title" class="form-field" />
                    <label class="@(string.IsNullOrEmpty(FormData.Title) ? null : "stay")">Title</label>
                    <ValidationMessage For="() => FormData.Title" />
                </fieldset>

                <fieldset class="alt">
                    <InputTextArea @bind-Value=FormData.Summary id="Summary" class="form-field" />
                    <label class="@(string.IsNullOrEmpty(FormData.Summary) ? null : "stay")">Summary</label>
                    <ValidationMessage For="() => FormData.Summary" />
                </fieldset>

                <fieldset>
                    <InputText @bind-Value=FormData.SourceUrl id="SourceUrl" class="form-field" />
                    <label class="@(string.IsNullOrEmpty(FormData.SourceUrl) ? null : "stay")">Source Url</label>
                    <ValidationMessage For="() => FormData.SourceUrl" />
                </fieldset>

                <fieldset>
                    <InputText @bind-Value=FormData.SourceText id="SourceText" class="form-field" />
                    <label class="@(string.IsNullOrEmpty(FormData.SourceText) ? null : "stay")">Source Text</label>
                    <ValidationMessage For="() => FormData.SourceText" />
                </fieldset>

            </div>

        </div>

    </div>

</EditForm>

@code {

    [Parameter]
    public ComponentParameters Component { get; set; } = default!;

    [Parameter]
    public EventCallback<ComponentParameters> OnRemoveComponent { get; set; }

    private async void RemoveComponent() =>
       await OnRemoveComponent.InvokeAsync(Component);

    [Parameter]
    public EventCallback<ComponentParameters> OnAddComponent { get; set; }


    bool Window { get; set; } = false;

    [Parameter]
    public EventCallback OnExpandModal { get; set; }

    private async Task ExpandModal()
    {
        Window = !Window;

        await OnExpandModal.InvokeAsync();
    }


    [SupplyParameterFromForm]
    public UpdateWatchListRequest FormData { get; set; } = default!;

    FormProgress Progress { get; set; } = FormProgress.None;

    string FormError { get; set; } = string.Empty;

    string FormMessage { get; set; } = string.Empty;

    private bool ShowHelp = false;


    List<DropdownList> Countries = new();

    List<DropdownList> Categories = new();


    protected override void OnInitialized()
    {

        Countries = getSelect.Get<Countries>();

        Categories = getSelect.Get<Categories>();

        FormData = new()
        {
                Id = Component.WatchlistSummary.Id,
                Title = Component.WatchlistSummary.Title,
                Summary = Component.WatchlistSummary.Summary,
                SourceText = Component.WatchlistSummary.SourceText,
                SourceUrl = Component.WatchlistSummary.SourceUrl,
                Category = Component.WatchlistSummary.Category,
                Country = Component.WatchlistSummary.Country == null ? null : Component.WatchlistSummary.Country
        };

    }

    protected void CountryClicked(ChangeEventArgs e)
    {
        FormData.Country = e.Value == null ? null : (Countries)Enum.Parse(typeof(Countries), e.Value.ToString()!);
    }

    protected void CategoryClicked(ChangeEventArgs e)
    {
        FormData.Category = e.Value == null ? null : (Categories)Enum.Parse(typeof(Categories), e.Value.ToString()!);
    }

    protected void CancelSubmission()
    {
        Cancel();

        FormError = "Process has been canceled";

        Progress = FormProgress.Error;
    }

    async Task FormAction(EditContext editContext)
    {

        if (!await authenticate.CheckJwtTokenAsync())
        {

            await OnAddComponent.InvokeAsync(new ComponentParameters() { ComponentType = ComponentTypes.LoginUser });

            return;

        }

        if (editContext.Validate())
        {

            Progress = FormProgress.Loading;

            FormError = string.Empty;

            var result = await saveWatchList.PostAsync("watchlists/update", FormData, CancelToken);

            if (result.IsFailure)
            {
                FormError = result.Error ?? "Unknown server error";

                Progress = FormProgress.Error;

                return;
            }
            else
            {

                if(result.Value.WatchList == null)
                {

                    Progress = FormProgress.Close;

                }
                else
                {

                    Component.WatchlistSummary = result.Value.WatchList;

                    Component.Info = "Watchlist Updated";

                    await OnRemoveComponent.InvokeAsync(Component);

                }

            }

        }
        else
        {
            FormError = "Form failed validation";

            Progress = FormProgress.Error;

            return;

        }
    }

}
