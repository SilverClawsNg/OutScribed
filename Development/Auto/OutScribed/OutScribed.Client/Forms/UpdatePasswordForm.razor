@inject IApiPatchServices<bool,UpdatePasswordRequest> updatePassword
@inject NavigationManager navigator
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject IAuthenticationServices authenticate

<EditForm Model=@FormData OnValidSubmit=@FormAction FormName="UpdatePasswordForm">

    <DataAnnotationsValidator />

    <div class="modal-header">

        <div class="inner-modal-header">

            <div class="modal-header-links">

               <h1>
                   Update Password
               </h1>

            </div>

            <div class="modal-header-menu">

                <a class="help" href="#" @onclick:preventDefault="true" @onclick='(() => ShowHelp = !ShowHelp)'>?</a>

                <button type="submit"></button>

                <a class="@(Window ? "maximize" : "minimize")" href="#" @onclick:preventDefault="true" @onclick='(() => ExpandModal())'></a>

                <a class="close" href="#" @onclick:preventDefault="true" @onclick='(() => RemoveComponent())'>X</a>

            </div>

        </div>

    </div>

    <div class="modal-body">

        <div class="inner-modal-body">

            @if (Progress == FormProgress.Loading)
            {
                <div class="form-progress">

                    <LoadingGif />

                    <p class="progress-message">@FormMessage </p>

                    <div class="progress-links">
                        <a href="#" @onclick:preventDefault="true" @onclick="CancelSubmission">
                            Cancel
                        </a>
                    </div>

                </div>

            }
            else if (Progress == FormProgress.Error)
            {
                <div class="form-progress">

                    <ErrorGif />

                    <p class="progress-message">
                        An error occured: <span class="error"> @FormError </span>
                    </p>
                    <div class="progress-links">

                        <a href="#" @onclick:preventDefault="true" @onclick="() => Progress = FormProgress.None">
                            Retry
                        </a>
                    </div>
                </div>

            }
            else if (Progress == FormProgress.Success)
            {
                <div class="form-progress">

                    <SuccessGif />

                    <p class="progress-message">
                       You successfully updated your password. Continue to re-signin with your new password.
                    </p>
                    <div class="progress-links">

                        <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo("/login?returnUrl=/my/profile")'>
                            Signin
                        </a>
                       
                    </div>

                </div>

            }

            <div class="@(ShowHelp ? "form-help active" : "form-help")">

                <ul>
                    <li>
                        Updating Password
                    </li>
                    <li>
                        It is always a good idea to regularly update your password details
                        on websites.
                    </li>
                    <li>
                       To update your password, you would be required to enter the old password as well as the new password.
                    </li>
                    <li>
                      While the only password constraint on this platform is that your password
                      must be at least 8 characters, it is advisable that your password
                      should contain a mix of lower and uppercase characters as well
                      as special characters.
                    </li>
                </ul>

            </div>

            <div class="form-container alt">

                <fieldset class="password-box">

                    <a class="show-password" href="#" @onclick:preventDefault="true" @onclick="() => OldPasswordVisible = !OldPasswordVisible" id="show-password"> </a>

                    <InputText @bind-Value=@FormData.OldPassword id="OldPassword" type="@(OldPasswordVisible == true ? "text" : "password")" class="form-field" />

                    <label class="@(string.IsNullOrEmpty(FormData.OldPassword) ?  null : "stay")">Old Password</label>

                </fieldset>

                <fieldset class="password-box">

                    <a class="show-password" href="#" @onclick:preventDefault="true" @onclick="() => PasswordVisible = !PasswordVisible" id="show-password"> </a>

                    <InputText @bind-Value=@FormData.Password id="Password" type="@(PasswordVisible == true ? "text" : "password")" class="form-field" />

                    <label class="@(string.IsNullOrEmpty(FormData.Password) ?  null : "stay")">New Password</label>

                </fieldset>

            </div>

        </div>

</div>

    </EditForm>

@code {

    [Parameter]
    public ComponentParameters Component { get; set; } = default!;

    [Parameter]
    public EventCallback<ComponentParameters> OnRemoveComponent { get; set; }

    private async void RemoveComponent() =>
       await OnRemoveComponent.InvokeAsync(Component);

    [SupplyParameterFromForm]
    public UpdatePasswordRequest FormData { get; set; } = default!;

    [Parameter]
    public EventCallback<ComponentParameters> OnAddComponent { get; set; }


    bool Window { get; set; } = false;

    [Parameter]
    public EventCallback OnExpandModal { get; set; }

    private async Task ExpandModal()
    {
        Window = !Window;

        await OnExpandModal.InvokeAsync();
    }


    public StarterData StarterData { get; set; } = new();


    FormProgress Progress { get; set; } = FormProgress.None;

    string FormError { get; set; } = string.Empty;

    string FormMessage { get; set; } = string.Empty;

    private bool ShowHelp = false;

    bool OldPasswordVisible { get; set; } = false;

    bool PasswordVisible { get; set; } = false;


    protected override void OnInitialized()
    {

        FormData = new();

    }

    protected void CancelSubmission()
    {
        Cancel();

        FormError = "Process has been canceled";

        Progress = FormProgress.Error;
    }

    async Task FormAction(EditContext editContext)
    {

        if (!await authenticate.CheckJwtTokenAsync())
        {
            await OnAddComponent.InvokeAsync(new ComponentParameters() { ComponentType = ComponentTypes.LoginUser });

            return;
        }

        if (editContext.Validate())
        {
            Progress = FormProgress.Loading;

            FormError = string.Empty;

            var result = await updatePassword.PatchAsync("accounts/update/password", FormData, CancelToken);

            if (result.IsFailure)
            {
                FormError = result.Error ?? "Unknown server error";

                Progress = FormProgress.Error;
            }
            else
            {

                await localStorage.RemoveItemsAsync(["refreshToken", "jwtToken", "starterData"]);

                httpClient.DefaultRequestHeaders.Authorization = null;

                Component.Info = "Password Updated";

                Progress = FormProgress.Success;

            }

        }
        else
        {

            Progress = FormProgress.Error;

            FormError = "Form failed validation";

            return;
        }
    }

}
