@page "/user/{Id}"

@inject NavigationManager navigator
@inject IApiPatchServices<CountsResponse,FollowUserRequest> followUser
@inject IApiGetServices<UserProfileResponse> getProfile
@inject IAuthenticationServices authenticate

<PageTitle>@Profile - OutScribed</PageTitle>

<HeaderComponent Tab="@NavTabs.None" />

<NavigationComponent Tab="@NavTabs.None" />

<main>

    @if (InputError == null)
    {

        if (HasInput)
        {

            <div class="user-profile-heading">

                <h1 class="at">
                    @Input.Username
                </h1>

                <h2>
                    User Since @Input.RegisterDateToString <br />
                    @Input.ProfileViews Views<span class="divider">|</span>@Input.Followers Followers
                </h2>

            </div>

            <div class="user-details-container">

                <div class="user-details">

                    @if (Input.Title == null)
                    {
                        <div class="no-profile">
                            No <br /> Profile
                        </div>
                    }
                    else if (Input.IsHidden)
                    {
                        <div class="no-profile">
                            Hidden <br /> Profile
                        </div>
                    }
                    else
                    {
                        <div class="user-photo">

                            <img src="@Input.DisplayPhotoToString" />

                        </div>

                        <h2>
                            @Input.Title
                        </h2>

                        <h3>
                            @Input.Bio
                        </h3>

                        <div class="dual-link-container">

                            <p class="dual-link">
                                @if (Input.IsFollowingUser)
                                {
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => FollowUser(false)'>
                                        Unfollow - @Input.FollowersToString
                                    </a>
                                }
                                else
                                {
                                    <a href="#" @onclick:preventDefault="true" @onclick='() => FollowUser(true)'>
                                        Follow - @Input.FollowersToString
                                    </a>
                                }
                                <a href="#" class="disabled">
                                    Profile Views - @Input.ProfileViewsToString
                                </a>
                            </p>

                            <p class="dual-link">
                                <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/tales?user={Input.Username}", false)'>
                                    Tales - @Input.TalesToString
                                </a>
                                <a href="#" @onclick:preventDefault="true" @onclick='() => navigator.NavigateTo($"/threads?user={Input.Username}", false)'>
                                    Threads - @Input.ThreadsToString
                                </a>
                            </p>

                        </div>
                    }

                </div>

                <div class="contacts-container">

                    <div class="contact">
                        <div class="icon">
                            <p class="facebook"></p>
                        </div>
                        <p class="text">
                            Facebook
                        </p>

                        @if (Input.Facebook == null)
                        {
                            <p class="not-found">Not found!</p>
                        }
                        else
                        {
                            <p class="value">@Input.Facebook</p>
                        }

                    </div>

                    <div class="contact">
                        <div class="icon">
                            <p class="twitter"></p>
                        </div>
                        <p class="text">
                            Twitter (X)
                        </p>

                        @if (Input.Twitter == null)
                        {
                            <p class="not-found">Not found!</p>
                        }
                        else
                        {
                            <p class="value">@Input.Twitter</p>
                        }

                    </div>

                    <div class="contact">
                        <div class="icon">
                            <p class="linkedin"></p>
                        </div>
                        <p class="text">
                            LinkedIn
                        </p>

                        @if (Input.LinkedIn == null)
                        {
                            <p class="not-found">Not found!</p>
                        }
                        else
                        {
                            <p class="value">@Input.LinkedIn</p>
                        }

                    </div>

                    <div class="contact">
                        <div class="icon">
                            <p class="email"></p>
                        </div>
                        <p class="text">
                            Email Address
                        </p>

                        @if (Input.Email == null)
                        {
                            <p class="not-found">Not found!</p>
                        }
                        else
                        {
                            <p class="value">@Input.Email</p>
                        }

                    </div>

                </div>

            </div>

        }
        else
        {

            <LoadingComponent Type="--- loading profile ---" />

        }
    }
    else
    {
        <ErrorComponent Message=@InputError Type="profile" />
    }


</main>

<FooterComponent />

@code {

    [Parameter]
    public string Id { get; set; } = default!;

    private string Profile { get; set; } = "Profile";


    bool HasInput { get; set; } = false;

    private string? InputError { get; set; }

    public UserProfileResponse Input { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {

        if (RendererInfo.Name == "WebAssembly")
        {
            await authenticate.CheckJwtTokenAsync();
        }

        var result = await getProfile.GetAsync($"users/{Id}", CancelToken);

        if (result.IsFailure)
        {
            InputError = result.Error ?? "Unknown server error";

        }
        else
        {
            Input = result.Value;

            Profile = Input.Title;

            HasInput = true;
        }

    }

    public string? Info { get; set; }

    private async Task FollowUser(bool option)
    {

        if (!await authenticate.CheckJwtTokenAsync())
        {
            navigator.NavigateTo($"/login?returnUrl=/user/{Id}", false);
        }

        FollowUserRequest formData = new()
            {
                UserId = Input.Id,
                Option = option
            };

        var result = await followUser.PatchAsync("accounts/follow", formData, CancelToken);

        if (result.IsFailure)
        {
            await SetInfo("Error: " + result.Error ?? "Unknown server error");

            return;
        }
        else
        {

            Input.IsFollowingUser = option;

            Input.Followers = result.Value.Counts;

            if (option)
            {
                await SetInfo("User followed");

            }
            else
            {
                await SetInfo("User Unfollowed");
            }

        }
    }

    private async Task SetInfo(string info)
    {

        Info = info;

        StateHasChanged();

        await Task.Delay(5000);

        Info = null;

        StateHasChanged();

    }

    
}
