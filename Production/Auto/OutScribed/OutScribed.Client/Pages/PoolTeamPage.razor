@page "/pool/teams"

@inject NavigationManager navigator
@inject IApiGetServices<AdminsResponse> getAdmins
@inject IApiGetServices<UserProfileResponse> getProfile
@inject ISelectServices getSelect
@inject IAuthenticationServices authenticate
@inject ILocalStorageService localStorage

@inject IJSRuntime JsRuntime

<PageTitle>Team - OutScribed</PageTitle>

@if (Info != null)
{
    <div id="quick-info">@Info</div>
}

<div id="modal" class="@(IsModalOpen ? "active" : null)">

    <a href="#" class="close-modal-wrapper" @onclick:preventDefault="true" @onclick='() => CloseModal()'></a>

    <div class="@(IsExpandModal ? $"inner-modal expand" : $"inner-modal")">

        @if (Components != null && Components.Any())
        {
            @foreach (var component in Components.OrderBy(c=>c.Date))
            {

                <div @key="component" class="@(component == Components.First() ? $"modal-contents first {component.ComponentClass}" : $"modal-contents {component.ComponentClass}")">

                    @if (component.ComponentType == ComponentTypes.AssignRole)
                    {
                        if (component.HasContents)
                        {

                            <AssignAdminForm Component="component"
                            OnExpandModal="ExpandModal"
                            OnRemoveComponent="RemoveComponent"
                            OnAddComponent="AddComponent" />
                        }

                    }
                    else if (component.ComponentType == ComponentTypes.UserProfile)
                    {
                        if (component.HasContents)
                        {

                            <UserProfileComponent Component="component"
                            OnExpandModal="ExpandModal"
                            OnAddComponent="AddComponent"
                            OnSetInfo="SetInfo"
                            OnRemoveComponent="RemoveComponent" />

                        }

                    }
                    else if (component.ComponentType == ComponentTypes.LoginUser)
                    {
                        if (component.HasContents)
                        {

                            <LoginUserForm Component="component"
                            OnRemoveComponent="RemoveComponent"
                            OnExpandModal="ExpandModal" />
                        }

                    }

                </div>

            }
        }


    </div>

</div>

<HeaderComponent Tab="@NavTabs.None" />

<NavigationComponent Tab="@NavTabs.Team" @ref="Navigation" />

<main>

    @if (InputError == null)
    {

        if (HasInput)
        {

            <div class="filter-container">

                <div class="filter-header">

                    <p>
                        @Input.CounterToString
                    </p>

                    <div class="filter-links">
                        <a href="#" class="filter" @onclick:preventDefault="true" @onclick='() => IsShowFilter = !IsShowFilter'>
                            Filter
                        </a>

                    </div>

                </div>

            </div>

            <div class="@(IsShowFilter ? "filter-contents active" : "filter-contents")">

                <div class="form-container alt">

                    <fieldset>

                        <select class="form-field" @onchange="@RoleClicked">

                            <option value="-1"></option>

                            @foreach (var type in Roles)
                            {

                                if (Role != null && type.Value == int.Parse(Role))
                                {
                                    <option value="@type.Value" selected="selected">@type.Text</option>
                                }
                                else
                                {
                                    <option value="@type.Value">@type.Text</option>
                                }
                            }

                        </select>

                        <label class="@(string.IsNullOrEmpty(Role)  || Role == "-1" ? null : "stay")">Filter By Role</label>

                    </fieldset>

                    <fieldset>

                        <select class="form-field" @onchange="@CountryClicked">

                            <option value="-1"></option>

                            @foreach (var country in Countries)
                            {
                                if (Country != null && country.Value == int.Parse(Country))
                                {
                                    <option value="@country.Value" selected="selected">@country.Text</option>
                                }
                                else
                                {
                                    <option value="@country.Value">@country.Text</option>
                                }
                            }

                        </select>

                        <label class="@(string.IsNullOrEmpty(Country)  || Country == "-1" ? null : "stay")">Filter by Country</label>

                    </fieldset>

                    <fieldset class="username">

                        <InputText @bind-Value=@Username id="Username" class="form-field" />

                        <label class="@(Username == null || string.IsNullOrEmpty(Username) ? null : "stay")">Filter by Username</label>

                    </fieldset>

                    <fieldset>

                        <select class="form-field" @onchange="@SortClicked">

                            <option value="-1"></option>

                            @foreach (var sort in Sorts)
                            {
                                if (Sort != null && sort.Value == int.Parse(Sort))
                                {
                                    <option value="@sort.Value" selected="selected">@sort.Text</option>
                                }
                                else
                                {
                                    <option value="@sort.Value">@sort.Text</option>
                                }
                            }

                        </select>

                        <label class="@(string.IsNullOrEmpty(Sort)  || Sort == "-1" ? null : "stay")">Order Results</label>

                    </fieldset>

                    <div class="button-holder">

                        <button @onclick:preventDefault="true" @onclick='() => LoadInput()'>
                            Get Teams
                        </button>

                    </div>

                </div>
            </div>

            if (Input.Admins != null && Input.Admins.Count > 0)
            {

                <div class="brief-content-container">

                    @foreach (var admin in Input.Admins)
                    {
                        <article class="brief-content">


                            <h1 class="at content-heading">
                                @admin.Username
                            </h1>

                            <p class="content-subheading">
                                @admin.CountryToString <span>|</span>
                                @admin.ApplicationDateToString
                            </p>

                            <p class="content-summary">
                                @admin.Address
                            </p>

                            <p class="content-summary italics">
                                <span>@admin.RoleToString</span>
                            </p>

                            <div class="content-links">

                                <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.UserProfile, Id = admin.Id})'>
                                    Profile
                                </a>

                                <a href="@admin.ApplicationUrlToString" target="_blank">
                                    Application
                                </a>

                                <a href="#" @onclick:preventDefault="true" @onclick='() => AddComponent(new ComponentParameters()
                                                    { ComponentType = ComponentTypes.AssignRole, Admin = admin})'>
                                    Update Role
                                </a>

                            </div>

                        </article>

                    }

                </div>

                <div class="navigation-container">

                    <div class="navigation-links">

                        @if (Input.Previous)
                        {
                            <a href="#" class="previous" @onclick:preventDefault="true" @onclick='() => LoadMore(0)'></a>
                        }
                        else
                        {
                            <a href="#" class="previous disabled" @onclick:preventDefault="true"></a>
                        }
                        @if (Input.Next)
                        {
                            <a href="#" class="next" @onclick:preventDefault="true" @onclick='() => LoadMore(1)'></a>
                        }
                        else
                        {
                            <a href="#" class="next disabled" @onclick:preventDefault="true"></a>
                        }

                    </div>

                </div>

            }
            else
            {
                <div class="no-content">

                    <ErrorGif />

                    <h3>
                        No Result!
                    </h3>

                    <p>
                        No member of the writing team matches your search parameters.
                    </p>

                </div>

            }

        }
        else
        {
            <LoadingComponent Type="--- loading pool team ---" />
        }
    }
    else
    {
        <ErrorComponent Message=@InputError Type="admins" />
    }


</main>

<FooterComponent />

@code {

    [Parameter]
    public NavigationComponent Navigation { get; set; } = default!;

    bool IsShowFilter { get; set; } = false;

    List<DropdownList> Countries = new();

    List<DropdownList> Sorts = new();

    List<DropdownList> Roles = new();



    bool IsModalOpen { get; set; } = false;


    bool HasProfile { get; set; } = false;

    public UserProfileResponse UserProfile { get; set; } = default!;

    private string? ProfileError { get; set; } = null;


    string? Country { get; set; }

    string? Sort { get; set; }

    string? Role { get; set; }

    private string? Username { get; set; }


    protected void CountryClicked(ChangeEventArgs e)
    {
        Country = e.Value == null ? null : e.Value.ToString();
    }

    protected void SortClicked(ChangeEventArgs e)
    {
        Sort = e.Value == null ? null : e.Value.ToString();
    }

    protected void RoleClicked(ChangeEventArgs e)
    {
        Role = e.Value == null ? null : e.Value.ToString();
    }

    public async Task LoadMore(int type)
    {
        if (type == 0)
            Input.Pointer--;
        else if (type == 1)
            Input.Pointer++;

        if (Input.Pointer >= 0)
        {
            await LoadInput();

        }

    }


    public AdminsResponse Input { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {


        if (RendererInfo.Name == "Static")
        {
            return;
        }
        else if (RendererInfo.Name == "Server")
        {
            navigator.NavigateTo($"/login?returnUrl=/pool/teams", true);
        }


        var starterData = await localStorage.GetItemAsync<StarterData>("starterData");

        if (starterData == null || starterData.Role == RoleTypes.None)
        {
            navigator.NavigateTo($"/login?returnUrl=/pool/teams", false);
        }

        Components = new();

        Countries = getSelect.Get<Countries>();

        Sorts = getSelect.Get<SortTypes>();

        Roles = getSelect.Get<RoleTypes>();

        await LoadInput();

    }

    bool HasInput { get; set; } = false;

    private string? InputError { get; set; }


    public string? Info { get; set; }

    private async Task SetInfo(string info)
    {

        Info = info;

        StateHasChanged();

        await Task.Delay(5000);

        Info = null;

        StateHasChanged();

    }

    bool IsExpandModal { get; set; } = false;

    int ScrollPosition { get; set; }

    List<ComponentParameters> Components { get; set; } = default!;

    private async Task AddComponent(ComponentParameters component)
    {

        shouldRender = false;

        Components.Insert(0, component);

        if (!IsModalOpen)
        {
            IsModalOpen = true;

            await JsRuntime.InvokeVoidAsync("OnGetScroll");
        }

        await authenticate.CheckJwtTokenAsync();

        if (component.ComponentType == ComponentTypes.UserProfile)
        {
            var result = await getProfile.GetAsync($"users/profile/{component.Id}", CancelToken);

            if (result.IsFailure)
            {
                component.ErrorMessage = result.Error ?? "Unknown server error";

            }
            else
            {
                component.Profile = result.Value;
            }
        }

        component.HasContents = true;

        component.ComponentState = ComponentStates.Enter;

        shouldRender = true;

    }

    public async Task RemoveComponent(ComponentParameters component)
    {

        var info = component.Info;

        component.ComponentState = ComponentStates.Leave;

        if (info != null)
        {
            if (component.ComponentType == ComponentTypes.LoginUser)
            {
                await Navigation.Refresh();
            }
        }

        await Task.Delay(1000);

        Components.Remove(component);

        if (Components.Count == 0)
        {
            await CloseModal();
        }

        StateHasChanged();

        if (info != null)
            await SetInfo(info);
    }

    public void ExpandModal()
    {

        IsExpandModal = !IsExpandModal;

    }

    private bool shouldRender = true;

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    public async Task CloseModal()
    {

        Components = new();

        IsModalOpen = false;

        await JsRuntime.InvokeVoidAsync("OnModalClose");

        // StateHasChanged();

    }

    public async Task LoadInput()
    {

   
        if (!await authenticate.CheckJwtTokenAsync())
        {
            navigator.NavigateTo($"/login?returnUrl=/pool/teams", false);
        }


        IsShowFilter = false;

        HasInput = false;

        InputError = null;

        var url = "users/admins?";

        if (!string.IsNullOrEmpty(Role))
        {
            Enum.TryParse(Role, out RoleTypes role);

            url = url + $"role={role}&";
        }

        if (!string.IsNullOrEmpty(Country))
        {
            Enum.TryParse(Country, out Countries country);

            url = url + $"country={country}&";
        }

        if (!string.IsNullOrEmpty(Sort))
        {
            Enum.TryParse(Sort, out SortTypes sort);

            url = url + $"sort={sort}&";
        }

        if (!string.IsNullOrEmpty(Username))
        {
            url = url + $"username={Username}&";
        }

        if (Input != null && Input.Pointer > 0)
        {
            url = url + $"pointer={Input.Pointer}&size=5";
        }
        else
        {
            url = url + "size=6";
        }

       
        var result = await getAdmins.GetAsync(url, CancelToken);

        if (result.IsFailure)
        {
            InputError = result.Error ?? "Unknown server error";

        }
        else
        {
            Input = result.Value;
        }

        await JsRuntime.InvokeVoidAsync("OnScrollToTop", 0);

        HasInput = true;

    }

}
