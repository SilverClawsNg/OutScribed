@page "/reset/password/{Username}"


@inject IApiPatchServices<bool,ResetPasswordRequest> resetPassword
@inject IApiPatchServices<bool,ResendOTPUsernameRequest> resendOTP
@inject NavigationManager navigator

<PageTitle>Password Recovery - OutScribed</PageTitle>

<HeaderComponent Tab="@NavTabs.None" />

<NavigationComponent Tab="@NavTabs.None" />

<main>

    <EditForm Model=@FormData OnValidSubmit=@FormAction FormName="RegisterForm">

        <div class="form-contents">

            @if (Progress == FormProgress.Loading)
            {
                <div class="form-progress">

                    <LoadingGif />

                    <p class="progress-message">@FormMessage </p>

                    <div class="progress-links">
                        <a href="#" @onclick:preventDefault="true" @onclick="CancelSubmission">
                            Cancel
                        </a>
                    </div>

                </div>

            }
            else if (Progress == FormProgress.Error)
            {
                <div class="form-progress">

                    <ErrorGif />

                    <p class="progress-message">
                        An error occured: <span class="error"> @FormError </span>
                    </p>
                    <div class="progress-links">

                        <a href="#" @onclick:preventDefault="true" @onclick="() => Progress = FormProgress.None">
                            Retry
                        </a>
                    </div>
                </div>

            }

            <div class="form-header">
                <h1 class="content-heading">
                    Reset Password
                </h1>
                <h2 class="content-summary">
                    Enter new password
                    <a class="show-help" href="#" @onclick:preventDefault="true" @onclick='(() => ShowHelp = !ShowHelp)'></a>
                </h2>
            </div>

            <div class="@(ShowHelp ? "form-help active" : "form-help")">
                <ul>
                    <li>
                        Complete Reset
                    </li>
                    <li>
                        To complete your password reset, provide the token that was recently
                        sent to your email address and/or WhatsApp then enter a new password.
                    </li>
                    <li>
                        Ensure that you check your email spam in case you did not find it
                        in your inbox else wait a few seconds and request for it to be resent.
</li>
<li>
    Do not attempt multiple requests within a short period ogf time to avoid a system pause.
</li>
                </ul>
            </div>

            <div class="form-container alt">

                <fieldset>

                    <InputNumber @bind-Value=@FormData.Otp id="Otp" class="form-field" />

                    <label class="stay">OTP</label>

                </fieldset>

                <fieldset class="password-box">

                    <a class="show-password" href="#" @onclick:preventDefault="true" @onclick="() => PasswordVisible = !PasswordVisible" id="show-password"> </a>

                    <InputText @bind-Value=@FormData.Password id="Password" type="@(PasswordVisible == true ? "text" : "password")" class="form-field" />

                    <label class="@(FormData.Password == null || string.IsNullOrEmpty(FormData.Password) ?  null : "stay")">New Password</label>

                </fieldset>

            </div>
            <div class="form-footer">

                <div class="form-footer-links">

                    <button type="submit">
                        Submit
                    </button>

                </div>

                <div class="form-footer-options">
                    <a href="#" @onclick:preventDefault="true" @onclick="ResendTokenAction" class="@(CanResend ? string.Empty : "disabled" )">
                        Resend OTP
                        @if (Timer != 0)
                        {
                            <span>in @Timer seconds</span>
                        }
                    </a>
                </div>

            </div>

        </div>

    </EditForm>

</main>

<FooterComponent />

@code {

    [Parameter]
    public string Username { get; set; } = null!;

    FormProgress Progress { get; set; } = FormProgress.None;

    string FormError { get; set; } = string.Empty;

    string FormMessage { get; set; } = string.Empty;

    private bool ShowHelp = false;

    public bool CanResend { get; set; } = false;

    public int Timer { get; set; }

    public int SendCounts { get; set; }

    protected void CancelSubmission()
    {
        Cancel();

        FormError = "Process has been canceled";

        Progress = FormProgress.Error;
    }

    [SupplyParameterFromForm]
    public ResetPasswordRequest FormData { get; set; } = default!;

    bool PasswordVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {

        FormData = new()
        {
            Username = Username
        };

        await UpdateSend();

    }

    async Task FormAction(EditContext editContext)
    {

        if (editContext.Validate())
        {
            Progress = FormProgress.Loading;

            FormError = string.Empty;

            var result = await resetPassword.PatchAsync("accounts/password/reset", FormData, CancelToken);

            if (result.IsFailure)
            {
                FormError = result.Error ?? "Unknown server error";

                Progress = FormProgress.Error;
            }
            else
            {
                navigator.NavigateTo($"/login", false);
            }

        }
        else
        {

            Progress = FormProgress.Error;

            FormError = "Form failed validation";

            return;

        }
    }

    private async Task UpdateSend()
    {
        Timer = 90;

        for (var i = 0; i < 90; i++)
        {
            await Task.Delay(1000);

            Timer--;

            StateHasChanged();
        }

        CanResend = true;
    }

    async Task ResendTokenAction()
    {

        CanResend = false;

        Progress = FormProgress.Loading;

        if (SendCounts == 5)
        {

            ResendOTPUsernameRequest data = new()
                {
                    Username = Username
                };

            await resendOTP.PatchAsync($"accounts/stop/recovery/otp", data, CancelToken);

            FormError = "Too many one-time password resends. Wait 30 minutes before trying again.";

            Progress = FormProgress.Close;
        }
        else
        {
            FormError = "Please wait while one-time password is resent...";

            ResendOTPUsernameRequest data = new()
                {
                    Username = Username
                };

            var result = await resendOTP.PatchAsync($"accounts/resend/recovery/otp", data, CancelToken);

            if (result.IsFailure)
            {
                FormError = result.Error ?? "Unknown server error";

                Progress = FormProgress.Error;

                CanResend = true;

            }
            else
            {
                FormError = "OTP was resent";

                Progress = FormProgress.None;

                SendCounts++;

                await UpdateSend();
            }
        }

    }

}
