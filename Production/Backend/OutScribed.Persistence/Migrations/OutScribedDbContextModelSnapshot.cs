// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OutScribed.Persistence.EntityConfigurations;

#nullable disable

namespace OutScribed.Persistence.Migrations
{
    [DbContext(typeof(OutScribedDbContext))]
    partial class OutScribedDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.Tale", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)")
                        .HasColumnName("Category");

                    b.Property<string>("Country")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("Country");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("Status");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tales", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TaleId");

                    b.ToTable("TaleComments", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleCommentFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlaggerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaleCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("TaleCommentId", "FlaggerId")
                        .IsUnique();

                    b.ToTable("TaleCommentFlags", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleCommentRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RaterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaleCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("TaleCommentId", "RaterId")
                        .IsUnique();

                    b.ToTable("TaleCommentRatings", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlaggerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("TaleId", "FlaggerId")
                        .IsUnique();

                    b.ToTable("TaleFlags", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaleId", "FollowerId")
                        .IsUnique();

                    b.ToTable("TaleFollowers", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("Status");

                    b.Property<Guid>("TaleId")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaleId");

                    b.ToTable("TaleHistories", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RaterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("TaleId", "RaterId")
                        .IsUnique();

                    b.ToTable("TaleRatings", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleShare", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SharerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("TaleId", "SharerId")
                        .IsUnique();

                    b.ToTable("TaleShares", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaleId");

                    b.ToTable("TaleTags", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TempUserManagement.Entities.TempUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<bool>("DoNotResendOtp")
                        .HasColumnType("boolean");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TempUsers", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.Threads", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)")
                        .HasColumnName("Category");

                    b.Property<string>("Country")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("Country");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaleId")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreaderId")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Threads", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsAddendum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ThreadsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ThreadsId");

                    b.ToTable("ThreadAddendums", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ThreadsId");

                    b.ToTable("ThreadComments", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsCommentFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlaggerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadsCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("ThreadsCommentId", "FlaggerId")
                        .IsUnique();

                    b.ToTable("ThreadCommentFlags", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsCommentRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RaterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadsCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("ThreadsCommentId", "RaterId")
                        .IsUnique();

                    b.ToTable("ThreadCommentRatings", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlaggerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("ThreadsId", "FlaggerId")
                        .IsUnique();

                    b.ToTable("ThreadFlags", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ThreadsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ThreadsId", "FollowerId")
                        .IsUnique();

                    b.ToTable("ThreadFollowers", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RaterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("ThreadsId", "RaterId")
                        .IsUnique();

                    b.ToTable("ThreadRatings", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsShare", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SharerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("ThreadsId", "SharerId")
                        .IsUnique();

                    b.ToTable("ThreadShares", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ThreadsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ThreadsId");

                    b.ToTable("ThreadTags", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<bool>("DoNotResendOtp")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.AccountFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "FollowerId")
                        .IsUnique();

                    b.ToTable("AccountFollowers", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ConstructorType")
                        .HasColumnType("integer");

                    b.Property<bool>("HasRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Type");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.LoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character varying(28)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("LoginHistories", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Profiles", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.WatchListManagement.Entities.LinkedTale", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WatchListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WatchListId", "TaleId")
                        .IsUnique();

                    b.ToTable("LinkedTales", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.WatchListManagement.Entities.WatchList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)")
                        .HasColumnName("Category");

                    b.Property<string>("Country")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("Country");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("WatchLists", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.WatchListManagement.Entities.WatchListFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("WatchListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WatchListId", "FollowerId")
                        .IsUnique();

                    b.ToTable("WatchListFollowers", (string)null);
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.Tale", b =>
                {
                    b.OwnsOne("OutScribed.Domain.Models.Common.RichText", "Details", b1 =>
                        {
                            b1.Property<Guid>("TaleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(32768)
                                .HasColumnType("character varying(32768)")
                                .HasColumnName("Details");

                            b1.HasKey("TaleId");

                            b1.ToTable("Tales");

                            b1.WithOwner()
                                .HasForeignKey("TaleId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "PhotoUrl", b1 =>
                        {
                            b1.Property<Guid>("TaleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("Photo");

                            b1.HasKey("TaleId");

                            b1.ToTable("Tales");

                            b1.WithOwner()
                                .HasForeignKey("TaleId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Summary", b1 =>
                        {
                            b1.Property<Guid>("TaleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("Summary");

                            b1.HasKey("TaleId");

                            b1.ToTable("Tales");

                            b1.WithOwner()
                                .HasForeignKey("TaleId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Title", b1 =>
                        {
                            b1.Property<Guid>("TaleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("Title");

                            b1.HasKey("TaleId");

                            b1.ToTable("Tales");

                            b1.WithOwner()
                                .HasForeignKey("TaleId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Url", b1 =>
                        {
                            b1.Property<Guid>("TaleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(144)
                                .HasColumnType("character varying(144)")
                                .HasColumnName("Url");

                            b1.HasKey("TaleId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Tales");

                            b1.WithOwner()
                                .HasForeignKey("TaleId");
                        });

                    b.Navigation("Details");

                    b.Navigation("PhotoUrl");

                    b.Navigation("Summary");

                    b.Navigation("Title")
                        .IsRequired();

                    b.Navigation("Url");
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleComment", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.TaleComment", null)
                        .WithMany("Responses")
                        .HasForeignKey("ParentId");

                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.Tale", null)
                        .WithMany("Comments")
                        .HasForeignKey("TaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.RichText", "Details", b1 =>
                        {
                            b1.Property<Guid>("TaleCommentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("character varying(1024)")
                                .HasColumnName("Details");

                            b1.HasKey("TaleCommentId");

                            b1.ToTable("TaleComments");

                            b1.WithOwner()
                                .HasForeignKey("TaleCommentId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleCommentFlag", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.TaleComment", null)
                        .WithMany("Flags")
                        .HasForeignKey("TaleCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleCommentRating", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.TaleComment", null)
                        .WithMany("Ratings")
                        .HasForeignKey("TaleCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleFlag", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.Tale", null)
                        .WithMany("Flags")
                        .HasForeignKey("TaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleFollower", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.Tale", null)
                        .WithMany("Followers")
                        .HasForeignKey("TaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleHistory", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.Tale", null)
                        .WithMany("Histories")
                        .HasForeignKey("TaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Reasons", b1 =>
                        {
                            b1.Property<Guid>("TaleHistoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(1024)
                                .HasColumnType("character varying(1024)")
                                .HasColumnName("Reasons");

                            b1.HasKey("TaleHistoryId");

                            b1.ToTable("TaleHistories");

                            b1.WithOwner()
                                .HasForeignKey("TaleHistoryId");
                        });

                    b.Navigation("Reasons");
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleRating", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.Tale", null)
                        .WithMany("Ratings")
                        .HasForeignKey("TaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleShare", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.Tale", null)
                        .WithMany("Sharers")
                        .HasForeignKey("TaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleTag", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.TalesManagement.Entities.Tale", null)
                        .WithMany("Tags")
                        .HasForeignKey("TaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Title", b1 =>
                        {
                            b1.Property<Guid>("TaleTagId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("Title");

                            b1.HasKey("TaleTagId");

                            b1.ToTable("TaleTags");

                            b1.WithOwner()
                                .HasForeignKey("TaleTagId");
                        });

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TempUserManagement.Entities.TempUser", b =>
                {
                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "EmailAddress", b1 =>
                        {
                            b1.Property<Guid>("TempUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(56)
                                .HasColumnType("character varying(56)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("TempUserId");

                            b1.ToTable("TempUsers");

                            b1.WithOwner()
                                .HasForeignKey("TempUserId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Otp", "Otp", b1 =>
                        {
                            b1.Property<Guid>("TempUserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("OtpDate");

                            b1.Property<int>("Password")
                                .HasColumnType("integer")
                                .HasColumnName("OtpPassword");

                            b1.HasKey("TempUserId");

                            b1.ToTable("TempUsers");

                            b1.WithOwner()
                                .HasForeignKey("TempUserId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("TempUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(24)
                                .HasColumnType("character varying(24)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("TempUserId");

                            b1.ToTable("TempUsers");

                            b1.WithOwner()
                                .HasForeignKey("TempUserId");
                        });

                    b.Navigation("EmailAddress");

                    b.Navigation("Otp")
                        .IsRequired();

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.Threads", b =>
                {
                    b.OwnsOne("OutScribed.Domain.Models.Common.RichText", "Details", b1 =>
                        {
                            b1.Property<Guid>("ThreadsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(32768)
                                .HasColumnType("character varying(32768)")
                                .HasColumnName("Details");

                            b1.HasKey("ThreadsId");

                            b1.ToTable("Threads");

                            b1.WithOwner()
                                .HasForeignKey("ThreadsId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "PhotoUrl", b1 =>
                        {
                            b1.Property<Guid>("ThreadsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("Photo");

                            b1.HasKey("ThreadsId");

                            b1.ToTable("Threads");

                            b1.WithOwner()
                                .HasForeignKey("ThreadsId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Summary", b1 =>
                        {
                            b1.Property<Guid>("ThreadsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("Summary");

                            b1.HasKey("ThreadsId");

                            b1.ToTable("Threads");

                            b1.WithOwner()
                                .HasForeignKey("ThreadsId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Title", b1 =>
                        {
                            b1.Property<Guid>("ThreadsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("Title");

                            b1.HasKey("ThreadsId");

                            b1.ToTable("Threads");

                            b1.WithOwner()
                                .HasForeignKey("ThreadsId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Url", b1 =>
                        {
                            b1.Property<Guid>("ThreadsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(144)
                                .HasColumnType("character varying(144)")
                                .HasColumnName("Url");

                            b1.HasKey("ThreadsId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Threads");

                            b1.WithOwner()
                                .HasForeignKey("ThreadsId");
                        });

                    b.Navigation("Details");

                    b.Navigation("PhotoUrl");

                    b.Navigation("Summary");

                    b.Navigation("Title")
                        .IsRequired();

                    b.Navigation("Url")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsAddendum", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.Threads", null)
                        .WithMany("Addendums")
                        .HasForeignKey("ThreadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.RichText", "Details", b1 =>
                        {
                            b1.Property<Guid>("ThreadsAddendumId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(4096)
                                .HasColumnType("character varying(4096)")
                                .HasColumnName("Details");

                            b1.HasKey("ThreadsAddendumId");

                            b1.ToTable("ThreadAddendums");

                            b1.WithOwner()
                                .HasForeignKey("ThreadsAddendumId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsComment", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.ThreadsComment", null)
                        .WithMany("Responses")
                        .HasForeignKey("ParentId");

                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.Threads", null)
                        .WithMany("Comments")
                        .HasForeignKey("ThreadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Details", b1 =>
                        {
                            b1.Property<Guid>("ThreadsCommentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("character varying(1024)")
                                .HasColumnName("Details");

                            b1.HasKey("ThreadsCommentId");

                            b1.ToTable("ThreadComments");

                            b1.WithOwner()
                                .HasForeignKey("ThreadsCommentId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsCommentFlag", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.ThreadsComment", null)
                        .WithMany("Flags")
                        .HasForeignKey("ThreadsCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsCommentRating", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.ThreadsComment", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ThreadsCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsFlag", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.Threads", null)
                        .WithMany("Flags")
                        .HasForeignKey("ThreadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsFollower", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.Threads", null)
                        .WithMany("Followers")
                        .HasForeignKey("ThreadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsRating", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.Threads", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ThreadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsShare", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.Threads", null)
                        .WithMany("Sharers")
                        .HasForeignKey("ThreadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsTag", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.ThreadsManagement.Threads", null)
                        .WithMany("Tags")
                        .HasForeignKey("ThreadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Title", b1 =>
                        {
                            b1.Property<Guid>("ThreadsTagId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("Title");

                            b1.HasKey("ThreadsTagId");

                            b1.ToTable("ThreadTags");

                            b1.WithOwner()
                                .HasForeignKey("ThreadsTagId");
                        });

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Account", b =>
                {
                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "EmailAddress", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(56)
                                .HasColumnType("character varying(56)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Otp", "Otp", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("OtpDate");

                            b1.Property<int>("Password")
                                .HasColumnType("integer")
                                .HasColumnName("OtpValue");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(24)
                                .HasColumnType("character varying(24)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Username", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Username");

                            b1.HasKey("AccountId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.UserManagement.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Salt");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.UserManagement.ValueObjects.RefreshToken", "RefreshToken", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("ExpiryDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("RefreshTokenExpiryDate");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("RefreshToken");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("EmailAddress");

                    b.Navigation("Otp");

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("RefreshToken");

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.AccountFollower", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.UserManagement.Entities.Account", null)
                        .WithMany("Followers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Activity", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.UserManagement.Entities.Account", null)
                        .WithMany("Activities")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Details", b1 =>
                        {
                            b1.Property<Guid>("ActivityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("Details");

                            b1.HasKey("ActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Admin", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.UserManagement.Entities.Account", null)
                        .WithOne("Admin")
                        .HasForeignKey("OutScribed.Domain.Models.UserManagement.Entities.Admin", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Address", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("Address");

                            b1.HasKey("AdminId");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Application", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("Application");

                            b1.HasKey("AdminId");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Application")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Contact", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.UserManagement.Entities.Account", null)
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Text", b1 =>
                        {
                            b1.Property<Guid>("ContactId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(56)
                                .HasColumnType("character varying(56)")
                                .HasColumnName("Text");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.Navigation("Text")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.LoginHistory", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.UserManagement.Entities.Account", null)
                        .WithMany("LoginHistories")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Profile", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.UserManagement.Entities.Account", null)
                        .WithOne("Profile")
                        .HasForeignKey("OutScribed.Domain.Models.UserManagement.Entities.Profile", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Bio", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(512)
                                .HasColumnType("character varying(512)")
                                .HasColumnName("Bio");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "PhotoUrl", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("DisplayPhoto");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Title", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("Title");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("Bio")
                        .IsRequired();

                    b.Navigation("PhotoUrl")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.WatchListManagement.Entities.LinkedTale", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.WatchListManagement.Entities.WatchList", null)
                        .WithMany("Tales")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.WatchListManagement.Entities.WatchList", b =>
                {
                    b.OwnsOne("OutScribed.Domain.Models.Common.Hyperlink", "Source", b1 =>
                        {
                            b1.Property<Guid>("WatchListId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(28)
                                .HasColumnType("character varying(28)")
                                .HasColumnName("SourceText");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("SourceUrl");

                            b1.HasKey("WatchListId");

                            b1.ToTable("WatchLists");

                            b1.WithOwner()
                                .HasForeignKey("WatchListId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Summary", b1 =>
                        {
                            b1.Property<Guid>("WatchListId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("character varying(1024)")
                                .HasColumnName("Summary");

                            b1.HasKey("WatchListId");

                            b1.ToTable("WatchLists");

                            b1.WithOwner()
                                .HasForeignKey("WatchListId");
                        });

                    b.OwnsOne("OutScribed.Domain.Models.Common.Label", "Title", b1 =>
                        {
                            b1.Property<Guid>("WatchListId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("Title");

                            b1.HasKey("WatchListId");

                            b1.ToTable("WatchLists");

                            b1.WithOwner()
                                .HasForeignKey("WatchListId");
                        });

                    b.Navigation("Source")
                        .IsRequired();

                    b.Navigation("Summary")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.WatchListManagement.Entities.WatchListFollower", b =>
                {
                    b.HasOne("OutScribed.Domain.Models.WatchListManagement.Entities.WatchList", null)
                        .WithMany("Followers")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.Tale", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Flags");

                    b.Navigation("Followers");

                    b.Navigation("Histories");

                    b.Navigation("Ratings");

                    b.Navigation("Sharers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("OutScribed.Domain.Models.TalesManagement.Entities.TaleComment", b =>
                {
                    b.Navigation("Flags");

                    b.Navigation("Ratings");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.Threads", b =>
                {
                    b.Navigation("Addendums");

                    b.Navigation("Comments");

                    b.Navigation("Flags");

                    b.Navigation("Followers");

                    b.Navigation("Ratings");

                    b.Navigation("Sharers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("OutScribed.Domain.Models.ThreadsManagement.ThreadsComment", b =>
                {
                    b.Navigation("Flags");

                    b.Navigation("Ratings");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("OutScribed.Domain.Models.UserManagement.Entities.Account", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Admin");

                    b.Navigation("Contacts");

                    b.Navigation("Followers");

                    b.Navigation("LoginHistories");

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("OutScribed.Domain.Models.WatchListManagement.Entities.WatchList", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Tales");
                });
#pragma warning restore 612, 618
        }
    }
}
